const mongoose = require('mongoose')
const validator = require('validator')

// To avoid confusion, a re: is a Post made by a user.
// But a re: can also refer to the references made within that post to other 
//stocks, re:s (posts), or portfolios.
// Which definition 're:' refers to will vary based on context.
const reSchema = mongoose.Schema({
  //author: author of the re, as id. None if the re was generated by the system.
  author: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },

  //text: text of the post, with re:x corresponding to the re #x.
  text: {
    type: String,
    required: true,
    maxLength: 160
  },

  // res: an array of the references made within this post.
  res: [{
    // type: the type of the reference, one of:
    // - "p" (portfolio)
    // - "s" (stock)
    // - "r" (another post)
    type: {
      type: String,
      required: true,
      validate: value => {
        return value === "p" || value === "s" || value === "r";
      }
    },

    // id: the id of the portfolio, stock, or re
    refid: {
      type: mongoose.Schema.Types.ObjectId,
    }
  }],

  //buys: the number of users who have bought this re:.
  buys: {
    type: Number,
    required: true,
    default: 0,
  }
})

reSchema.statics.getById = async(id) => {
  try {
    const re = await Re.findById(id);
    if (!re) {
      return false;
    }
    return re;
  } catch (error) {
    return false;
  }
}

reSchema.statics.get = async(conditions, projection = '') => {
  try {
    const res = await Re.find(conditions, projection);
    if (!res) {
      return false;
    }
    return res;
  } catch (error) {
    return false;
  }
}

const Re = mongoose.model('Re', reSchema)

module.exports = Re;